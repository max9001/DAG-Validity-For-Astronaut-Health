options(digits = 0)
# require(bnlearn)
# install.packages("bnlearn")
library(bnlearn)
library(Rgraphviz)
# load predefined dataset. this dataset is from bnlearn
data(gaussian.test)
#print first couple rows
head(gaussian.test)
# normalize values in table to be between 0 and 1
# (represent continuous values or measurements (such as temperature, height, time, etc.))
max_value <- max(gausian.test)
# normalize values in table to be between 0 and 1
# (represent continuous values or measurements (such as temperature, height, time, etc.))
max_value <- max(gaussian.test)
print(max_value)
# normalize values in table to be between 0 and 1
# (represent continuous values or measurements (such as temperature, height, time, etc.))
max_value <- max(gaussian.test)
# Divide every entry in the dataframe by 'max_value'
gaussian.test <- apply(gaussian.test, 2, function(x) x / max_value)
# Print the resulting dataframe
print(gaussian.test)
# normalize values in table to be between 0 and 1
# (represent continuous values or measurements (such as temperature, height, time, etc.))
max_value <- max(gaussian.test)
# Convert the dataframe to numeric
gaussian.test <- as.data.frame(lapply(gaussian.test, as.numeric))
# Divide every entry in the dataframe by 'max_value' and take absolute value
gaussian.test <- apply(gaussian.test, 2, function(x) abs(x) / max_value)
# Print the resulting dataframe
print(gaussian.test)
# Print the resulting dataframe
head(gaussian.test)
options(digits = 0)
# require(bnlearn)
# install.packages("bnlearn")
library(bnlearn)
library(Rgraphviz)
# load predefined dataset. this dataset is from bnlearn
data(gaussian.test)
#print first couple rows
head(gaussian.test)
# normalize values in table to be between 0 and 1
# (represent continuous values or measurements (such as temperature, height, time, etc.))
max_value <- max(gaussian.test)
# Convert the dataframe to numeric
gaussian.test <- as.data.frame(lapply(gaussian.test, as.numeric))
# Print the resulting dataframe
head(gaussian.test)
# Divide every entry in the dataframe by 'max_value' and take absolute value
gaussian.test <- apply(gaussian.test, 2, function(x) abs(x) / max_value)
# Print the resulting dataframe
head(gaussian.test)
options(digits = 0)
# require(bnlearn)
# install.packages("bnlearn")
library(bnlearn)
library(Rgraphviz)
# load predefined dataset. this dataset is from bnlearn
data(gaussian.test)
#print first couple rows
head(gaussian.test)
# normalize values in table to be between 0 and 1
# (represent continuous values or measurements (such as temperature, height, time, etc.))
max_value <- max(gaussian.test)
# Convert the dataframe to numeric
gaussian.test <- as.data.frame(lapply(gaussian.test, as.numeric))
# Divide every entry in the dataframe by 'max_value' and take absolute value
gaussian.test <- apply(gaussian.test, 2, function(x) abs(x) / max_value)
# Print the resulting dataframe
head(gaussian.test)
options(digits = 0)
options(digits = 0)
# require(bnlearn)
# install.packages("bnlearn")
library(bnlearn)
library(Rgraphviz)
# load predefined dataset. this dataset is from bnlearn
data(gaussian.test)
#print first couple rows
head(gaussian.test)
# normalize values in table to be between 0 and 1
# (represent continuous values or measurements (such as temperature, height, time, etc.))
max_value <- max(gaussian.test)
# Convert the dataframe to numeric
gaussian.test <- as.data.frame(lapply(gaussian.test, as.numeric))
# Normalize the dataframe to a range between 0 and 1
max_value <- max(unlist(gaussian.test))
gaussian.test_normalized <- apply(gaussian.test, 2, function(x) x / max_value)
# Print the resulting normalized dataframe
head(gaussian.test_normalized)
options(digits = 0)
# require(bnlearn)
# install.packages("bnlearn")
library(bnlearn)
library(Rgraphviz)
# load predefined dataset. this dataset is from bnlearn
data(gaussian.test)
#print first couple rows
head(gaussian.test)
# normalize values in table to be between 0 and 1
# (represent continuous values or measurements (such as temperature, height, time, etc.))
max_value <- max(unlist(gaussian.test))
gaussian.test_normalized <- apply(gaussian.test, 2, function(x) x / max_value)
# Print the resulting normalized dataframe
head(gaussian.test_normalized)
x <- 5L
x <- x/10
print(x)
x <- 5L
x <- as.numeric(x)
x <- x/10
print(x)
x <- 5L
x <- x * 1.0 / 10
print(x)
x <- 5L
x <- x * 1.0 / 10
print(x)
x <- x * 1.1
print(x)
x <- 5L
x <- x * 1.1
print(x)
x <- 5L
print(class(x))
x <- 5L
print(class(x))
x <- as.numeric(x)
print(class(x))
x <- 5L
print(class(x))
x <- as.numeric(x)
print(class(x))
x <- x * 1.1
print(x)
x <- 5L
print(class(x))
x <- as.numeric(x)
print(class(x))
x <- x * 100.5
print(x)
x <- 5L
print(class(x))
x <- as.numeric(x)
print(class(x))
x <- x * 1.1
print(x)
y <- 5
print(class(y))
y <- 5 * 1.1
print(y)
z <- pi
print(class(z))
print(z)
print(pi)
