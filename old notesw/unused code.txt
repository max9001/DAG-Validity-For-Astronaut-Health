

# require(bnlearn)
# install.packages("bnlearn")

# load predefined dataset. this dataset is from bnlearn
data(gaussian.test)

max_val <- max(gaussian.test)
gaussian.test.normalized <- abs(gaussian.test / max_val)

# Use pc.stable to estimate the DAG structure
dag <- pc.stable(gaussian.test, undirected = FALSE)
dag_normalized <- pc.stable(gaussian.test.normalized, undirected = FALSE)

# print(nodes(dag))
# print(arcs(dag))

# Manually specify the direction of all edges in the DAG
dag_fix <- set.arc(dag, nodes(dag)[2], nodes(dag)[4], check.cycles = TRUE, check.illegal = TRUE, debug = FALSE)
dag_fix_normalized <- set.arc(dag_normalized, nodes(dag)[2], nodes(dag)[4], check.cycles = TRUE, check.illegal = TRUE, debug = FALSE)

# Visualize the resulting DAG
graphviz.plot(dag_fix)
graphviz.plot(dag_fix_normalized)




























# 
# # ======================================================
# # Discretize tabular data
# # ======================================================
# 
# # Discretize using the "interval" method
# discretized_interval <- discretize(
#     data = gaussian.test,
#     method = "interval",
#     breaks = 4,
#     ordered = TRUE
# )
# 
# # Discretize using the "quantile" method
# discretized_quantile <- discretize(
#     data = gaussian.test,
#     method = "quantile",
#     breaks = 4,
#     ordered = TRUE
# )
# 
# # Discretize using the "hartemink" method
# discretized_hartemink <- discretize(
#     data = gaussian.test,
#     method = "hartemink",
#     breaks = 4,
#     ordered = TRUE
# )
# 
# print(discretized_interval)
# dag <- pc.stable(discretized_quantile)
# 
# # Visualize the resulting DAG
# graphviz.plot(dag)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# # Generate random numbers between 0 and 1 using runif()
# random_data <- data.frame(
#     A = runif(5000, min = 0, max = 1),
#     B = runif(5000, min = 0, max = 1),
#     C = runif(5000, min = 0, max = 1),
#     D = runif(5000, min = 0, max = 1),
#     E = runif(5000, min = 0, max = 1),
#     F = runif(5000, min = 0, max = 1),
#     G = runif(5000, min = 0, max = 1)
# )
# print(random_data)
# 
# 
# # ======================================================
# # Discretize tabular data
# # ======================================================
# # 
# # # Discretize using the "interval" method
# # discretized_interval <- discretize(
# #     data = gaussian.test,
# #     method = "interval",
# #     breaks = 4,
# #     ordered = TRUE
# # )
# # 
# # # Discretize using the "quantile" method
# # discretized_quantile <- discretize(
# #     data = gaussian.test,
# #     method = "quantile",
# #     breaks = 4,
# #     ordered = TRUE
# # )
# # 
# # # Discretize using the "hartemink" method
# # discretized_hartemink <- discretize(
# #     data = gaussian.test,
# #     method = "hartemink",
# #     breaks = 4,
# #     ordered = TRUE
# # )
# # 
# # # Store the discretized variables in a list
# # list_M <- list(
# #     interval = discretized_interval,
# #     quantile = discretized_quantile,
# #     hartemink = discretized_hartemink
# # )
# # 
# # # summary(discretized_interval)
# # # summary(discretized_quantile)
# # # summary(discretized_hartemink)
# # 
# 
# 
# 
# 
# 
# # v_algorithms <- c(
# #     "pc.stable","gs","iamb","fast.iamb","inter.iamb","iamb.fdr","mmpc",
# #     "si.hiton.pc", "hpc", "hc", "tabu", "rsmax2", "mmhc", "h2pc", 
# #     "aracne", "chow.liu"
# # )
# # 
# # list_bnlearn <- list()
# # 
# # for(j in v_algorithms) for(k in names(list_M)) try({
# #     list_bnlearn[[j]][[k]] <- do.call(
# #         what = j,
# #         args = list(x = list_M[[k]])
# #     )
# #     M_arcs <-arcs(list_bnlearn[[j]][[k]])
# #     for(l in 1:nrow(M_arcs)){
# #         list_bnlearn[[j]][[k]] <- set.arc(
# #             x = list_bnlearn[[j]][[k]],
# #             from = M_arcs[l,1],
# #             to = M_arcs[l,2],
# #             check.cycles = FALSE,
# #             check.illegal = FALSE            
# #         )
# #         list_bnlearn[[j]][[k]] <- choose.direction(
# #             x = list_bnlearn[[j]][[k]],
# #             arc = M_arcs[l,],
# #             data = list_M[[k]]
# #         )
# #     }
# # }, silent = FALSE)
# # 
# # 
# # # =====================
# # # scoring the networks
# # # =====================
# # 
# # M_score <- matrix(
# #     data = NA,
# #     nrow = length(v_algorithms),
# #     ncol = length(list_M),
# # )
# # 
# # rownames(M_score) <- v_algorithms
# # colnames(M_score) <- names(list_M)
# # 
# # for(j in v_algorithms) for(k in names(list_M)) try({
# #     M_score[j,k] <- score(
# #         x = list_bnlearn[[j]][[k]],
# #         data = list_M[[k]],
# #         type = "bic"
# #     )
# # })
# # 
# # # for(j in rownames(M_score)) M_score <- M_score[,order(M_score[j,])]
# # # for(J in colnames(M_score)) M_score <- M_score[order(M_score[,j]),]
# # 
# # # for (j in rownames(M_score)) {
# # #     M_score <- M_score[, order(M_score[j, ], na.last = NA)]
# # # }
# # # 
# # # for (j in colnames(M_score)) {
# # #     M_score <- M_score[order(M_score[, j], na.last = NA), ]
# # # }
# # 
# # M_score
